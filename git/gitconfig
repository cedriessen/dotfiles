# A good list of alises http://haacked.com/archive/2014/07/28/github-flow-aliases/
[alias]
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Complex

  changelog = !~/dev/gitscripts/git-changelog.sh
  find-similar = !~/dev/gitscripts/git-find-similar.sh
  merge-bases = !~/dev/gitscripts/git-merge-bases
  my-stash = !~/dev/gitscripts/git-my-stash.sh
  show-branch-dev-master = !~/dev/gitscripts/git-show-branch-dev-master.sh
  onbranch = !~/dev/gitscripts/git-on-branch.sh
  author = !~/dev/gitscripts/git-author.sh
  pdiff = diff --no-color
  modified-modules = !/usr/local/bin/elixir -r ~/dev/gitscripts/git.exs ~/dev/gitscripts/git_modified_modules.exs
  commit-diff = !~/dev/gitscripts/git-commit-diff.sh

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Staging

  a = add
  aa = add --all

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Branch

  b = branch
  branch-name = rev-parse --abbrev-ref HEAD
  branch-diff = diff master...HEAD
  branch-files = "!git diff master...HEAD --name-status | sed '/^D/d ; s/^.\\s\\+//'"
  branches-gone = "!git branch -vv|grep gone"
  branches-remote = "!f() { \
      remote="${1:-origin}"; \
      git ls-remote --heads "$remote"; \
  }; f"

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Commit

  c = commit
  ca = commit -a
  cm = commit -m
  cal = !git add -A && git commit              # Commit all changes
  cam = commit -am
  cne = commit --no-edit
  amend = commit --amend
  amend-all = !git add --all && git commit --amend --reuse-message=HEAD

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Clone

  cl = clone
  sclone = clone --depth=1

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Checkout

  co = checkout
  cb = checkout -b

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Cherry-pick

  cp = cherry-pick

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Diff

  d = diff --color-words
  dc = diff --cached
  df = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Pull

  pp = pull --prune

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Stash

  	stl = stash list
  	wip-push = stash push -m WIP
  	wip-pull = stash pop

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Status/Logging

  s = status
  ss = status -sb
  l = log --pretty=custom                      # Show custom log with relative date
  lf = log --pretty=customfulldate             # Show custom log with full date
  lff = log --pretty=customfulldates           # Show custom log with full date both author and committer
  ll = log --stat --abbrev-commit
  lp = log -p --stat

  # log commits per author using .mailmap
  log-contributors = shortlog --summary --numbered --no-merges

  log-graph = log --graph --oneline
  lns = !git log --pretty=custom --no-merges HEAD "^${1:-origin/develop}"     # Log new: Anything new on HEAD?
  ln-this = "!f() { \
    against=${@: -1}; \
    params=${@::${#@}-1}; \
    echo "new on HEAD against $against"; \
    git log --no-merges ${params} HEAD "^${against}"; \
  }; f"
  ln-other = "!f() { \
    against=${@: -1}; \
    params=${@::${#@}-1}; \
    echo "New on $against against HEAD"; \
    git log --no-merges ${params} "^HEAD" "${against}"; \
  }; f"
  # list new local (compared to remote)
  ln-local = "!f() { \
    local_branch=${1:-$(git cb)}; \
    remote_branch=origin/$local_branch; \
    git log --pretty=custom --no-merges $local_branch "^$remote_branch"; \
  }; f"
  # list new remote (compared to local). Run a fetch first
  ln-remote = "!f() { \
    local_branch=${1:-$(git cb)}; \
    remote_branch=origin/$local_branch; \
    git log --pretty=custom --no-merges "^$local_branch" $remote_branch; \
  }; f"

  # show SHA of HEAD
  head-sha = rev-parse head
  incoming = !"git fetch --prune; git log $(git rev-parse --abbrev-ref --symbolic-full-name @{u}) '^HEAD' --no-merges --name-only"

  # https://stackoverflow.com/questions/10622179/how-to-find-identify-large-files-commits-in-git-history
  # to clean the repo https://rtyley.github.io/bfg-repo-cleaner/
  blobsize = !"git rev-list --objects --all \
      | git cat-file --batch-check='%(objecttype) %(objectname) %(objectsize) %(rest)' \
      | sed -n 's/^blob //p' \
      | sort --numeric-sort --key=2 \
      | cut -c 1-12,41-"

  # show current branch name
  cb = !git rev-parse --abbrev-ref HEAD

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Reset

  unstage = reset HEAD --                      # Mixed reset (affects HEAD and Index)
  undo = reset --soft HEAD~1                   # Undo last commit (affects HEAD only)
  reset = reset --hard HEAD~1                  # Remove last commit (from HEAD, Index and Working Dir)

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Remote

  r = remote -v

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Find

  # commits by source code
  find-code = "!f() { \
      git log --pretty=custom --decorate --date=short -S\"$1\"; \
  }; f"

  # commits by message
  find-message = "!f() { \
      git log --pretty=custom --decorate --date=short --grep=\"$1\"; \
  }; f"


  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Misc

  # Remove the tag with the specified tag name if
  # exists and tag the latest commit with that name

  retag = "!f() { \
      git tag -d "$1" &> /dev/null; \
      git tag $1; \
  }; f"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# So much color
[color]
        ui = always

[color "branch"]
        current = green bold
        local = green
        remote = yellow

[color "diff"]
        frag = magenta
        meta = yellow
        new = green
        old = red

[color "diff-highlight"]
        oldNormal = red bold
        oldHighlight = "red bold 52"
        newNormal = "green bold"
        newHighlight = "green bold 22"

[color "status"]
        added = green reverse
        changed = yellow reverse
        untracked = red reverse

# Git mergetool
[merge]
        tool = opendiff
        renameLimit = 2000

[core]
        editor = vim
#        abbrev = 12
        attributesfile = ~/.gitattributes
	      excludesfile = /Users/ced/.gitignore
        autocrlf = input
#        mergeoptions = --no-edit
#        ignorecase = false

[user]
	name = Christoph Driessen
	email = cdriessen@extron.com

[pager]
        # Insanely beautiful diffs ==> npm install -g diff-so-fancy
        diff = diff-so-fancy | less --tabs=4 -RFX
        show = diff-so-fancy | less --tabs=4 -RFX

[diff "bin"]
        # Use `hexdump` to diff binary files
        textconv = hexdump -v -C

[pretty]
	      customfulldate = "%C(magenta)%h%C(red)%d %C(yellow)%ai %C(green)%s %C(yellow)(%an)"
	      customfulldates = "%C(magenta)%h%C(red)%d %C(yellow)a=%ai %C(blue)c=%ci %C(green)%s %C(yellow)(%an)"
        custom = "%C(magenta)%h%C(red)%d %C(yellow)%ar %C(green)%s %C(yellow)(%an)"
        #                     │        │            │            │             └─ author name
        #                     │        │            │            └─ message
        #                     │        │            └─ date (relative)
        #                     │        └─ decorations (branch, heads or tags)
        #                     └─ hash (abbreviated)

[help]
        # Correct typos
        autocorrect = 1

[fetch]
        prune = true


# Any GitHub repo with my username should be checked out r/w by default
# http://rentzsch.tumblr.com/post/564806957/public-but-hackable-git-submodules
#[url "git@github.com:nicksp/"]
#        insteadOf = "git://github.com/nicksp/"

# Rewrites of repo paths
#[url "git@github.com:"]
#        insteadOf = "gh:"
#        insteadOf = "git://github.com"
#        pushInsteadOf = "github:"
#        pushInsteadOf = "git://github.com/"
#        pushInsteadOf = "https://github.com/"

#[url "git://github.com/"]
#        insteadOf = "github:"

#[url "git@gist.github.com:"]
#        insteadOf = "gst:"
#        pushInsteadOf = "gist:"
#        pushInsteadOf = "git://gist.github.com/"
#        pushInsteadOf = "https://gist.github.com/"

#[url "git://gist.github.com/"]
#        insteadOf = "gist:"

# Push easily http://stackoverflow.com/a/23918418/89484
#[push]
#        # Make `git push` automatically push relevant
#        # annotated tags when pushing branches out
#        followTags = true
#        default = current
#	      default = simple


# Use separate file for username / github token / etc
#[include]
#        path = ~/.gitconfig.local

#[filter "lfs"]
#        clean = git lfs clean %f
#        smudge = git lfs smudge %f
#        required = true
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 
[mergetool "sourcetree"]
	cmd = /Applications/Sourcetree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[commit]
	template = /Users/ced/.stCommitMsg
